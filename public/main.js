const labels = []; // th·ªùi gian
const tempData = []; // nhi·ªát ƒë·ªô
const turbData = []; // ƒë·ªô ƒë·ª•c

const ctx = document.getElementById('myChart').getContext('2d');
const myChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: labels,
        datasets: [
            {
                label: 'Nhi·ªát ƒë·ªô (¬∞C)',
                data: tempData,
                borderWidth: 2,
                borderColor: 'red',
                fill: false
            },
            {
                label: 'ƒê·ªô ƒë·ª•c (ADC)',
                data: turbData,
                borderWidth: 2,
                borderColor: 'blue',
                fill: false
            }
        ]
    },
    options: {
        scales: {
            x: {
                title: {
                    display: true,
                    text: 'Th·ªùi gian'
                }
            },
            y: {
                beginAtZero: true
            }
        }
    }
});

//Nh·∫≠n d·ªØ li·ªáu th·ªùi gian th·ª±c qua WebSocket
const socket = new WebSocket('ws://localhost:3000');
let isRealtimeMode = true; // Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t ch·∫ø ƒë·ªô realtime

socket.onmessage = (event) => {
    const json = JSON.parse(event.data);
    console.log('Realtime data:', json);

    // X·ª≠ l√Ω d·ªØ li·ªáu unified format
    if (json.temperature !== undefined && json.turbidity !== undefined) {
        // D·ªØ li·ªáu sensor (nhi·ªát ƒë·ªô, ƒë·ªô ƒë·ª•c) - ch·ªâ c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì khi ·ªü ch·∫ø ƒë·ªô realtime
        if (isRealtimeMode) {
            // Ch·ªâ hi·ªÉn th·ªã ng√†y, b·ªè gi·ªù
            const dateOnly = json.timestamp.split(' ')[0] || json.timestamp.split('T')[0];
            labels.push(dateOnly);
            tempData.push(json.temperature);
            turbData.push(json.turbidity);

            // Ch·ªâ gi·ªØ l·∫°i 10 ƒëi·ªÉm g·∫ßn nh·∫•t
            if (labels.length > 10) {
                labels.shift();
                tempData.shift();
                turbData.shift();
            }

            myChart.update();
        }
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã (lu√¥n c·∫≠p nh·∫≠t, kh√¥ng ph·ª• thu·ªôc v√†o realtime mode)
    if (json.distance !== undefined) {
        updateFoodLevel(json.distance);
    }
    
    if (json.PIR !== undefined) {
        updateMotionDetection(json.PIR);
    }

    if (json.turbidity !== undefined) {
        updateWaterQuality(json.turbidity);
    }
};

//T·∫£i d·ªØ li·ªáu c≈© t·ª´ Firebase th√¥ng qua server
async function loadHistory() {
    const from = document.getElementById('from-date').value;
    const to = document.getElementById('to-date').value;
    if (!from || !to) {
        alert('Vui l√≤ng ch·ªçn c·∫£ ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c!');
        return;
    }

    // T·∫Øt ch·∫ø ƒë·ªô realtime khi l·ªçc d·ªØ li·ªáu
    isRealtimeMode = false;

    try {
        const response = await fetch(`http://localhost:3000/data_sensor?from=${from}&to=${to}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('D·ªØ li·ªáu l·ªãch s·ª≠:', data);

        // Xo√° d·ªØ li·ªáu c≈© tr√™n bi·ªÉu ƒë·ªì
        labels.length = 0;
        tempData.length = 0;
        turbData.length = 0;

        data.forEach(d => {
            // Ch·ªâ hi·ªÉn th·ªã ng√†y, b·ªè gi·ªù
            const dateOnly = d.timestamp.split(' ')[0] || d.timestamp.split('T')[0];
            labels.push(dateOnly);
            tempData.push(d.temperature);
            turbData.push(d.turbidity);
        });

        myChart.update();
    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
        alert('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra server!');
        // B·∫≠t l·∫°i realtime n·∫øu c√≥ l·ªói
        isRealtimeMode = true;
    }
}

function enableRealtime() {
    isRealtimeMode = true;
    
    labels.length = 0;
    tempData.length = 0;
    turbData.length = 0;

    // T·ª± ƒë·ªông c·∫≠p nh·∫≠t ng√†y h√¥m qua v√† h√¥m nay
    const today = new Date();
    const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
    
    // Chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªãnh d·∫°ng YYYY-MM-DD theo m√∫i gi·ªù ƒë·ªãa ph∆∞∆°ng
    const formatDate = (date) => {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    };
    
    document.getElementById('to-date').value = formatDate(today);
    document.getElementById('from-date').value = formatDate(yesterday);

    myChart.update();
    console.log('ƒê√£ b·∫≠t ch·∫ø ƒë·ªô th·ªùi gian th·ª±c');
}

// üéõÔ∏è H√†m ƒëi·ªÅu khi·ªÉn servo
async function controlServo(value) {
    try {
        const statusElement = document.getElementById('servo-status');
        statusElement.textContent = 'ƒêang g·ª≠i l·ªánh...';
        statusElement.style.color = 'orange';

        const response = await fetch('http://localhost:3000/control/servo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ value: value })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('Servo control result:', result);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i
        statusElement.textContent = value === 1 ? 'Servo: B·∫¨T' : 'Servo: T·∫ÆT';
        statusElement.style.color = value === 1 ? 'green' : 'red';
        
    } catch (error) {
        console.error('L·ªói khi ƒëi·ªÅu khi·ªÉn servo:', error);
        const statusElement = document.getElementById('servo-status');
        statusElement.textContent = 'L·ªói k·∫øt n·ªëi!';
        statusElement.style.color = 'red';
    }
}

// H√†m c·∫≠p nh·∫≠t l∆∞·ª£ng th·ª©c ƒÉn d·ª±a v√†o distance (s·ª≠a element ID)
function updateFoodLevel(distanceInCm) {
    const foodPercentageElement = document.getElementById('food-percentage');
    const foodStatusElement = document.getElementById('food-status');
    
    if (!foodPercentageElement || !foodStatusElement) return;
    
    if (distanceInCm === undefined || distanceInCm === null) {
        foodPercentageElement.textContent = '--';
        foodStatusElement.textContent = 'Kh√¥ng c√≥ d·ªØ li·ªáu';
        return;
    }

    // T√≠nh to√°n m·ª©c th·ª©c ƒÉn (distance c√†ng l·ªõn = th·ª©c ƒÉn c√†ng √≠t)
    let foodLevel;
    let levelText;
    let statusText;

    if (distanceInCm <= 3) {
        foodLevel = 100;
        levelText = '100%';
        statusText = 'ƒê·∫ßy';
    } else if (distanceInCm <= 6) {
        foodLevel = 75;
        levelText = '75%';
        statusText = 'T·ªët';
    } else if (distanceInCm <= 10) {
        foodLevel = 50;
        levelText = '50%';
        statusText = 'Trung b√¨nh';
    } else if (distanceInCm <= 15) {
        foodLevel = 25;
        levelText = '25%';
        statusText = 'Th·∫•p';
    } else {
        foodLevel = 0;
        levelText = '0%';
        statusText = 'H·∫øt';
    }

    foodPercentageElement.textContent = levelText;
    foodStatusElement.textContent = statusText;
}

// H√†m c·∫≠p nh·∫≠t ch·∫•t l∆∞·ª£ng n∆∞·ªõc
function updateWaterQuality(turbidity) {
    const waterQualityElement = document.getElementById('water-quality');
    const waterStatusElement = document.getElementById('water-status');
    
    if (!waterQualityElement || !waterStatusElement) return;
    
    if (turbidity === undefined || turbidity === null) {
        waterQualityElement.textContent = '--';
        waterStatusElement.textContent = 'Kh√¥ng c√≥ d·ªØ li·ªáu';
        return;
    }

    // ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng n∆∞·ªõc d·ª±a tr√™n ƒë·ªô ƒë·ª•c
    let qualityText;
    let statusText;

    if (turbidity <= 100) {
        qualityText = 'R·∫•t t·ªët';
        statusText = 'An to√†n';
    } else if (turbidity <= 200) {
        qualityText = 'T·ªët';
        statusText = 'B√¨nh th∆∞·ªùng';
    } else if (turbidity <= 300) {
        qualityText = 'Trung b√¨nh';
        statusText = 'C·∫ßn theo d√µi';
    } else {
        qualityText = 'K√©m';
        statusText = 'C·∫ßn x·ª≠ l√Ω';
    }

    waterQualityElement.textContent = qualityText;
    waterStatusElement.textContent = statusText;
}

// H√†m c·∫≠p nh·∫≠t ph√°t hi·ªán chuy·ªÉn ƒë·ªông
function updateMotionDetection(pirValue) {
    const motionElement = document.getElementById('motion-status');
    
    if (!motionElement) return;
    
    if (pirValue === undefined || pirValue === null) {
        motionElement.textContent = '--';
        return;
    }

    // PIR sensor: 1 = c√≥ chuy·ªÉn ƒë·ªông, 0 = kh√¥ng c√≥ chuy·ªÉn ƒë·ªông
    if (pirValue === 1 || pirValue === '1' || pirValue === true) {
        motionElement.textContent = 'Ph√°t hi·ªán chuy·ªÉn ƒë·ªông';
        motionElement.style.color = '#ff5722';
    } else {
        motionElement.textContent = 'Kh√¥ng c√≥';
        motionElement.style.color = '#4caf50';
    }
}

// H√†m t·∫Øt h·ªá th·ªëng kh·∫©n c·∫•p
function emergencyShutdown() {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt h·ªá th·ªëng?')) {
        // Th·ª±c hi·ªán logic t·∫Øt h·ªá th·ªëng
        console.log('T·∫Øt h·ªá th·ªëng kh·∫©n c·∫•p');
        alert('ƒê√£ g·ª≠i l·ªánh t·∫Øt h·ªá th·ªëng');
    }
}

// Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i th√¥ng b√°o
let notificationEnabled = true;

function sendAlert() {
    console.log('T·∫Øt th√¥ng b√°o');
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o
    notificationEnabled = false;
    
    // T√¨m v√† c·∫≠p nh·∫≠t element hi·ªÉn th·ªã tr·∫°ng th√°i th√¥ng b√°o
    const notificationStatusElements = document.querySelectorAll('.status-indicator');
    notificationStatusElements.forEach(element => {
        const textContent = element.textContent || element.innerText;
        if (textContent.includes('Th√¥ng b√°o:')) {
            const statusDiv = element.querySelector('div:last-child');
            const labelDiv = element.querySelector('div:first-child');
            
            if (statusDiv && labelDiv) {
                statusDiv.textContent = 'ƒê√£ t·∫Øt';
                labelDiv.style.color = '#f44336'; // ƒê·ªïi m√†u th√†nh ƒë·ªè
                element.classList.remove('active');
                element.classList.add('inactive');
            }
        }
    });
    
    // C·∫≠p nh·∫≠t text n√∫t th√†nh "B·∫≠t th√¥ng b√°o"
    const alertButton = document.querySelector('.emergency-btn.alert');
    if (alertButton) {
        alertButton.innerHTML = '<i class="fas fa-bell"></i> B·∫≠t th√¥ng b√°o';
        alertButton.onclick = () => enableAlert();
    }
    
    alert('ƒê√£ t·∫Øt th√¥ng b√°o h·ªá th·ªëng');
}

// H√†m b·∫≠t l·∫°i th√¥ng b√°o
function enableAlert() {
    console.log('B·∫≠t th√¥ng b√°o');
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o
    notificationEnabled = true;
    
    // T√¨m v√† c·∫≠p nh·∫≠t element hi·ªÉn th·ªã tr·∫°ng th√°i th√¥ng b√°o
    const notificationStatusElements = document.querySelectorAll('.status-indicator');
    notificationStatusElements.forEach(element => {
        const textContent = element.textContent || element.innerText;
        if (textContent.includes('Th√¥ng b√°o:')) {
            const statusDiv = element.querySelector('div:last-child');
            const labelDiv = element.querySelector('div:first-child');
            
            if (statusDiv && labelDiv) {
                statusDiv.textContent = 'ƒêang b·∫≠t';
                labelDiv.style.color = '#4caf50'; // ƒê·ªïi m√†u th√†nh xanh
                element.classList.remove('inactive');
                element.classList.add('active');
            }
        }
    });
    
    // C·∫≠p nh·∫≠t text n√∫t th√†nh "T·∫Øt th√¥ng b√°o"
    const alertButton = document.querySelector('.emergency-btn.alert');
    if (alertButton) {
        alertButton.innerHTML = '<i class="fas fa-exclamation-triangle"></i> T·∫Øt th√¥ng b√°o';
        alertButton.onclick = () => sendAlert();
    }
    
    alert('ƒê√£ b·∫≠t th√¥ng b√°o h·ªá th·ªëng');
}


// üïí T·ª± ƒë·ªông set ng√†y h√¥m nay v√† h√¥m qua
window.onload = () => {
    const today = new Date();
    const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
    
    // Chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªãnh d·∫°ng YYYY-MM-DD theo m√∫i gi·ªù ƒë·ªãa ph∆∞∆°ng
    const formatDate = (date) => {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    };
    
    document.getElementById('to-date').value = formatDate(today);
    document.getElementById('from-date').value = formatDate(yesterday);
    
    // T·∫£i tr·∫°ng th√°i thi·∫øt b·ªã ban ƒë·∫ßu
    loadDeviceStatus();
};

// üì° H√†m t·∫£i tr·∫°ng th√°i thi·∫øt b·ªã ban ƒë·∫ßu
async function loadDeviceStatus() {
    try {
        const today = new Date();
        const todayStr = today.getFullYear() + '-' + 
                       String(today.getMonth() + 1).padStart(2, '0') + '-' + 
                       String(today.getDate()).padStart(2, '0');
        
        // T·∫£i d·ªØ li·ªáu sensor m·ªõi nh·∫•t ƒë·ªÉ l·∫•y tr·∫°ng th√°i thi·∫øt b·ªã
        const response = await fetch(`http://localhost:3000/data_sensor?from=${todayStr}&to=${todayStr}`);
        
        if (response.ok) {
            const data = await response.json();
            if (data.length > 0) {
                const latestStatus = data[data.length - 1]; // L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
                
                // C·∫≠p nh·∫≠t UI v·ªõi d·ªØ li·ªáu m·ªõi nh·∫•t
                if (latestStatus.distance !== undefined) {
                    updateFoodLevel(latestStatus.distance);
                }
                
                if (latestStatus.PIR !== undefined) {
                    updateMotionDetection(latestStatus.PIR);
                }

                if (latestStatus.turbidity !== undefined) {
                    updateWaterQuality(latestStatus.turbidity);
                }
            }
        }
    } catch (error) {
        console.log('Kh√¥ng th·ªÉ t·∫£i tr·∫°ng th√°i thi·∫øt b·ªã ban ƒë·∫ßu:', error);
    }
}
